name: 'check PR description'
description: Check the PR description for a string and the following command.
inputs:
  string:
    description: String to check for
    required: true
  pr_ref:
    description: Pull request ID
    required: true
outputs:
  pr-contains-string:
    description: true/false whether the PR description contains the string
    value: ${{ steps.check-string.outputs.pr-contains-string }}
  renku:
    description: renku reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku }}
  renku-core:
    description: renku-core reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku-core }}
  renku-gateway:
    description: renku-gateway reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku-gateway }}
  renku-graph:
    description: renku-graph reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku-graph }}
  renku-notebooks:
    description: renku-notebooks reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku-notebooks }}
  renku-ui:
    description: renku-ui reference as specified in the command string
    value: ${{ steps.check-string.outputs.renku-ui }}
  extra-values:
    description: "extra values passed to helm; separate multiple values with commas: key1=val1,key2=val2"
    value: ${{ steps.check-string.outputs.extra-values }}
  test-enabled:
    description: whether the selenium tests should run or not
    value: ${{ steps.check-string.outputs.test-enabled }}
  test-cypress-enabled:
    description: whether the cypress tests should run or not
    value: ${{ steps.check-string.outputs.test-cypress-enabled }}
  persist:
    description: whether the CI deployment should be kept after the acceptance tests complete
    value: ${{ steps.check-string.outputs.persist }}
runs:
  using: "composite"
  steps:
    - id: check-string
      run: |
        echo "Target PR: https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ inputs.pr_ref }}"
        pr_text=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ inputs.pr_ref }} | jq '.body')
        pr_contains_string=$(echo $pr_text | jq 'test("${{ inputs.string }}")' || echo "false")
        echo "pr-contains-string=$pr_contains_string" >> $GITHUB_OUTPUT
        echo "String found: $pr_contains_string"
        test_enabled=true
        cypress_enabled=false
        persist=false
        if [ "$pr_contains_string" = true ] ; then
          command=$(echo $pr_text | jq -r 'split("${{ inputs.string }} ") | last | split("\r\n") | first')
          if [[ $command != *"${{ inputs.string }}"* ]]; then
            echo "Command found: $command"
            match="renku=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku reference: ${BASH_REMATCH[1]}"
              echo "renku=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="renku-core=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku-core reference: ${BASH_REMATCH[1]}"
              echo "renku-core=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="renku-gateway=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku-gateway reference: ${BASH_REMATCH[1]}"
              echo "renku-gateway=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="renku-graph=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku-graph reference: ${BASH_REMATCH[1]}"
              echo "renku-graph=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="renku-notebooks=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku-notebooks reference: ${BASH_REMATCH[1]}"
              echo "renku-notebooks=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="renku-ui=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "renku-ui reference: ${BASH_REMATCH[1]}"
              echo "renku-ui=@${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
            match="#notest"
            if [[ $command =~ $match ]]; then
              test_enabled=false
            fi
            match="#cypress"
            if [[ $command =~ $match ]]; then
              cypress_enabled=true
            fi
            match="#persist"
            if [[ $command =~ $match ]]; then
              persist=true
            fi
            match="extra-values=(\S*)"
            if [[ $command =~ $match ]]; then
              echo "extra values: ${BASH_REMATCH[1]}"
              echo "extra-values=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No command found"
          fi
        fi
        echo "Test enabled: $test_enabled"
        echo "test-enabled=${test_enabled}" >> $GITHUB_OUTPUT
        echo "Cypress enabled: $cypress_enabled"
        echo "test-cypress-enabled=${cypress_enabled}" >> $GITHUB_OUTPUT
        echo "Persist CI deployment after tests: $persist"
        echo "persist=${persist}" >> $GITHUB_OUTPUT
      shell: bash
